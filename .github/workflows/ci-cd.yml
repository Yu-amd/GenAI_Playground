name: GenAI Playground CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCIES: true

jobs:
  # Quality Assurance Job
  quality-check:
    name: Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type checking
      run: npx tsc --noEmit
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run Prettier check
      run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

  # Testing Job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm test -- --coverage --reporter=verbose
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: model-catalog
        name: model-catalog-coverage
        fail_ci_if_error: false
        
    - name: Check test coverage threshold
      run: |
        COVERAGE=$(npx coverage-badges-cli --input=./coverage/lcov.info --output=./coverage/badges --type=cobertura)
        echo "Coverage: $COVERAGE"
        if [ "$COVERAGE" -lt 80 ]; then
          echo "❌ Test coverage is below 80%"
          exit 1
        fi
        echo "✅ Test coverage meets threshold"

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      
    - name: Run additional security checks
      run: |
        echo "Running additional security checks..."
        # Check for known vulnerable packages
        npm audit --audit-level=high || echo "High severity vulnerabilities found - review required"
        
        # Check for outdated packages with security implications
        npm outdated --depth=0 | grep -E "(critical|high)" || echo "No critical/high severity outdated packages found"
        


  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality-check, test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 30

  # Performance Testing Job
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check bundle size
      run: |
        echo "Checking bundle size..."
        ls -la dist/assets/
        echo "Bundle size check completed"
        
    - name: Validate build output
      run: |
        echo "Validating build output..."
        if [ -f "dist/index.html" ]; then
          echo "✅ Build output is valid"
        else
          echo "❌ Build output is missing index.html"
          exit 1
        fi

  # Staging Deployment Job
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to staging
      run: |
        # Add your staging deployment logic here
        echo "Deploying to staging environment..."
        # Example: rsync -avz dist/ user@staging-server:/var/www/html/
        # Example: aws s3 sync dist/ s3://staging-bucket/
        
    - name: Run smoke tests
      run: |
        # Add smoke tests for staging environment
        echo "Running smoke tests on staging..."
        # Example: curl -f http://staging.example.com/health
        
    - name: Notify staging deployment
      run: |
        echo "✅ Staging deployment completed successfully"
        # Add notification logic (Slack, email, etc.)

  # Production Deployment Job
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to production
      run: |
        # Add your production deployment logic here
        echo "Deploying to production environment..."
        # Example: rsync -avz dist/ user@prod-server:/var/www/html/
        # Example: aws s3 sync dist/ s3://prod-bucket/
        
    - name: Run health checks
      run: |
        # Add health checks for production environment
        echo "Running health checks on production..."
        # Example: curl -f http://prod.example.com/health
        
    - name: Notify production deployment
      run: |
        echo "✅ Production deployment completed successfully"
        # Add notification logic (Slack, email, etc.)

  # Model Data Validation Job
  validate-model-data:
    name: Validate Model Data
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate model data structure
      run: npm run validate-model-data
        
    - name: Check model card markdown
      run: npm run validate-markdown

  # Bundle Analysis Job
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Analyze bundle size
      run: npm run build:analyze
        
    - name: Check bundle size thresholds
      run: npm run check-bundle-size 