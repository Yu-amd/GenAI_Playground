model_id: Qwen/Qwen2-7B-Instruct
name: Qwen2 7B Instruct
builder: Alibaba Qwen Team
family: Qwen2
size: 7B
huggingface_id: Qwen/Qwen2-7B-Instruct

description: >
  Qwen2 has generally surpassed most open-source models and demonstrated competitiveness against proprietary models across a series of benchmarks targeting for language understanding, language generation, multilingual capability, coding, mathematics, reasoning, etc. This 7B instruction-tuned variant excels at code generation and mathematical reasoning.

logo: model_Qwen2-7B.png

readiness_level: Tech Preview
status_badges:
  - FP16
  - FlashAttention
  - Tech Preview

tags:
  - Code Generation
  - Mathematics
  - Reasoning
  - Multilingual
  - Instruction-Tuned
  - vLLM-Compatible
  - sglang-Compatible

license: Apache 2.0

endpoint: https://api.inference-hub.com/v1/chat/completions

demo_assets:
  notebook: https://github.com/inference-hub/notebooks/qwen2-7b-instruct-demo.ipynb
  demo_link: https://playground.inference-hub.com/models/Qwen/Qwen2-7B-Instruct

aim_recipes:
  - name: MI300X FP16
    hardware: MI300X
    precision: fp16
    recipe_file: configs/qwen2-7b-instruct-mi300x-fp16.yaml

  - name: MI250 FP16
    hardware: MI250
    precision: fp16
    recipe_file: configs/qwen2-7b-instruct-mi250-fp16.yaml

api_examples:
  python: |
    import requests

    headers = {
        "Authorization": "Bearer YOUR_API_KEY",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "Qwen/Qwen2-7B-Instruct",
        "messages": [{"role": "user", "content": "Hello"}],
        "stream": False
    }

    response = requests.post("https://api.inference-hub.com/v1/chat/completions", headers=headers, json=payload)
    print(response.json())

  javascript: |
    const response = await fetch("https://api.inference-hub.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": "Bearer YOUR_API_KEY",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "Qwen/Qwen2-7B-Instruct",
        messages: [{ role: "user", content: "Hello" }],
        stream: false
      })
    });

    const data = await response.json();
    console.log(data.choices[0].message.content);

  shell: |
    curl -X POST https://api.inference-hub.com/v1/chat/completions \
      -H "Authorization: Bearer YOUR_API_KEY" \
      -H "Content-Type: application/json" \
      -d '{
        "model": "Qwen/Qwen2-7B-Instruct",
        "messages": [{"role": "user", "content": "Hello"}],
        "stream": false
      }'

  java: |
    HttpClient client = HttpClient.newHttpClient();
    HttpRequest request = HttpRequest.newBuilder()
        .uri(URI.create("https://api.inference-hub.com/v1/chat/completions"))
        .header("Authorization", "Bearer YOUR_API_KEY")
        .header("Content-Type", "application/json")
        .POST(HttpRequest.BodyPublishers.ofString("""
          {
            "model": "Qwen/Qwen2-7B-Instruct",
            "messages": [{"role": "user", "content": "Hello"}],
            "stream": false
          }
        """))
        .build();

    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
    System.out.println(response.body());

  go: |
    package main

    import (
        "bytes"
        "fmt"
        "io/ioutil"
        "net/http"
    )

    func main() {
        jsonStr := []byte(`{
            "model": "Qwen/Qwen2-7B-Instruct",
            "messages": [{"role": "user", "content": "Hello"}],
            "stream": false
        }`)

        req, _ := http.NewRequest("POST", "https://api.inference-hub.com/v1/chat/completions", bytes.NewBuffer(jsonStr))
        req.Header.Set("Authorization", "Bearer YOUR_API_KEY")
        req.Header.Set("Content-Type", "application/json")

        client := &http.Client{}
        resp, _ := client.Do(req)
        body, _ := ioutil.ReadAll(resp.Body)
        fmt.Println(string(body))
    }

  csharp: |
    using System.Net.Http;
    using System.Text;
    using System.Threading.Tasks;

    var client = new HttpClient();
    var request = new HttpRequestMessage(HttpMethod.Post, "https://api.inference-hub.com/v1/chat/completions");
    request.Headers.Add("Authorization", "Bearer YOUR_API_KEY");

    var json = """
    {
        "model": "Qwen/Qwen2-7B-Instruct",
        "messages": [{"role": "user", "content": "Hello"}],
        "stream": false
    }
    """;

    request.Content = new StringContent(json, Encoding.UTF8, "application/json");

    var response = await client.SendAsync(request);
    var responseBody = await response.Content.ReadAsStringAsync();
    Console.WriteLine(responseBody);

model_card:
  overview: >
    Qwen2 7B Instruct is a powerful instruction-tuned language model from Alibaba's Qwen team. 
    It excels at code generation, mathematical reasoning, and multilingual tasks, often 
    outperforming larger models in these domains.

  intended_use:
    - Code generation and analysis
    - Mathematical problem solving
    - Conversational AI
    - Multilingual text generation
    - Reasoning tasks
    - Document understanding

  limitations:
    - May hallucinate facts
    - Not suitable for safety-critical use
    - Performance may vary on very complex reasoning tasks
    - Limited context window compared to larger models

  training_data: >
    Diverse web corpus, code repositories, mathematical datasets, and multilingual content.
    Training data cutoff: December 2023.

  evaluation:
    - "MMLU: 71.2"
    - "HumanEval (code): 58.3%"
    - "GSM8K: 85.1%"
    - "MATH: 45.2%"
    - "MT-Bench: 8.3"

  known_issues:
    - May produce biased content
    - Code generation may have syntax errors
    - Mathematical reasoning can be inconsistent on complex problems
    - Performance varies across programming languages

  references:
    - https://huggingface.co/Qwen/Qwen2-7B-Instruct
    - https://github.com/QwenLM/Qwen2
    - https://qwen.ai/ 